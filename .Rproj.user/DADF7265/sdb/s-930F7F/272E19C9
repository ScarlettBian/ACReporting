{
    "collab_server" : "",
    "contents" : "#' @name IDR\n#' @title A function to prepare for IDR.\n#' @description Generate keycheck figures and DIF figures, perform DIF analysis, CTT analysis, and IRT analysis.\n#' All the plots and csv files are stored in the folders. The results stored in txt files in jMetrik are stored as outputs of this function.\n#' Reading is always analyzed before Listening.\n#' @param MainPath The folder where the response files are stored in\n#' @param TestName Name of the test\n#' @param n_demo number of demographic variables, usually it's 6.\n#' @param DIF whether we are going to do DIF detection. The rule of thumb is each group should have more than 50 participants.\n#' Thus, the default is F.\n#' @return Descriptive summary, dif results, CTT results and IRT results\n#' @examples\n#' IDR(MainPath, TestName, n_demo=6)\n#' more content\n\nIDR<-function(MainPath, TestName, n_demo=6, DIF=F)\n{\n  library(\"psych\")\n  library(\"KernSmooth\")\n  library(\"difR\")\n  library(\"eRm\")\n  result<-list(NULL,NULL)\n  for (Skill in c(\"Reading\",\"Listening\"))\n  {\n    Data<-ReadCSVFile(paste0(MainPath,\"/Data/jMetrik/\"),paste0(TestName, \"_\", Skill,\"_jMetrik\"))\n    ItemNo<-ncol(Data)-3-n_demo\n    PerNo<-nrow(Data)\n    response<-Data[,(n_demo+1):(n_demo+ItemNo)] # delete columns with demographic information and total score etc.\n    name<-colnames(response)\n    #### Descriptive Statistics ####\n    ctt_score<-ctt_Score(response, key=1)\n    sum_score<-ctt_score$score\n    score_matrix<-ctt_score$scored\n    dist_1<-ctt_Score(response, key=2)$scored\n    dist_2<-ctt_Score(response, key=3)$scored\n    dist_3<-ctt_Score(response, key=4)$scored\n\n    sum_describe1<- matrix(round(describe(sum_score),digits = 4),ncol=1)\n    sum_describe1[13]<-round(sd(sum_score),digits=4)\n    name_describe<-c(\"N\",\"Min\",\"Max\",\"Mean\",\"St.Dev.\", \"Skewness\", \"Kurtosis\")\n    sum_describe<-data.frame(cbind(name_describe,sum_describe1[c(2,8,9,3,13,11,12)]))\n    colnames(sum_describe)<-c(\"Statistic\", \"Value\")\n    rownames(sum_describe)<-NULL\n\n    #### Kernel Desnsity ###\n    den<-density(sum_score,kernel = \"gaussian\",bw=\"bcv\")\n    bw<-den$bw\n    #### Key Check ####\n    # create folder to store key check plots\n    KeycheckPath<-paste0(MainPath, \"/UploadFiles/\", Skill, \"/keycheck/\")\n    if (file.exists(KeycheckPath)==F)\n    {\n      if (file.exists(paste0(MainPath,\"/UploadFiles/\"))==F)\n      {\n        dir.create(paste0(MainPath,\"/UploadFiles/\"))\n        dir.create(paste0(MainPath,\"/UploadFiles/\",Skill,\"/\"))\n        dir.create(KeycheckPath)\n      } else {\n        if (file.exists(paste0(MainPath,\"/UploadFiles/\",Skill,\"/\"))==F)\n        {\n          dir.create(paste0(MainPath,\"/UploadFiles/\",Skill,\"/\"))\n          dir.create(KeycheckPath)\n        } else dir.create(KeycheckPath)\n      }\n    }\n\n\n    blue <- rgb(30,144,255,alpha=60,maxColorValue=255)\n    red <- rgb(255, 0, 30, alpha=60, maxColorValue = 255)\n    grey <- rgb(50,0,50, alpha=60, maxColorValue = 255)\n    green<- rgb(0,200,0, maxColorValue = 255)\n    exp_score<-matrix(,nrow=ItemNo,ncol=51) # expected score\n    for (j in 1:ItemNo)\n    {\n      jpeg(paste0(KeycheckPath,colnames(response)[j],\".jpg\"), width = 450, height = 400)\n      par(mar=c(8,7,4,2))\n      fit<-locpoly(sum_score, score_matrix[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      exp_score[j,]<-fit$y\n      plot(fit$x,fit$y,type=\"l\", ylim=c(0,1), #main=paste0(\"ICC for \",colnames(response)[j]),\n           xlim=range(sum_score), xlab=\"Total Correct\",ylab=\"Probability\",lwd=2)\n\n      fit<-locpoly(sum_score, dist_1[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,ylim=c(0,1),xlim=range(sum_score),col=\"red\",lty=2,lwd=2)\n\n      fit<-locpoly(sum_score, dist_2[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,ylim=c(0,1),xlim=range(sum_score),col=\"blue\",lty=3,lwd=2)\n\n      fit<-locpoly(sum_score, dist_3[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,ylim=c(0,1),xlim=range(sum_score),col=green,lty=4,lwd=2)\n\n      #legend(\"topleft\", legend=c(\"Key\", \"Distractor 1\", \"Distractor 2\", \"Distractor 3\"),\n      #       lty=c(1,2,2,2), col=c(\"black\", \"red\", \"blue\", green),bty=\"n\")\n      polygon(x=c(den$x,rev(den$x)),y=c(den$y*10,rep(0,length(den$x))),col=blue,border=NA)\n      dev.off()\n    }\n\n    score_withna<-score_matrix\n    score_withna[which(response==\"NA\")]<-NA\n\n  #### CTT analysis ####\n  difficulty<-prop1<-colSums(score_matrix)/PerNo\n  stdev<-stdev1<-apply(score_matrix,2,sd)\n  # index for top 27% and bottom 27%\n  n_27<-round(0.27*PerNo)\n  top_27<-sort.int(sum_score,decreasing = T, index.return=T)$ix[1:n_27]\n  bottom_27<-sort.int(sum_score,index.return=T)$ix[1:n_27]\n  # compute discrimination with top and bottom 27, thus not equal to biserial correlation\n  discrimination<-(colSums(score_matrix[top_27,])-colSums(score_matrix[bottom_27,]))/n_27\n  # biserial correlation\n  cor1<-cor2<-cor3<-cor4<-NULL\n  for (j in 1:ItemNo)\n  {\n    if (sum(score_matrix[,j])==PerNo | sum(score_matrix[,j])==0){\n      cor1[j]<-0\n    } else cor1[j]<-biserial(sum_score-score_matrix[,j],score_matrix[,j])\n    if (sum(dist_1[,j])==PerNo | sum(dist_1[,j])==0) {\n      cor2[j]<-0\n    } else cor2[j]<-biserial(sum_score,dist_1[,j])\n    if (sum(dist_2[,j])==PerNo | sum(dist_2[,j])==0) {\n      cor3[j]<-0\n    } else cor3[j]<-biserial(sum_score,dist_2[,j])\n    if (sum(dist_3[,j])==PerNo | sum(dist_3[,j])==0) {\n      cor4[j]<-0\n    } else cor4[j]<-biserial(sum_score,dist_3[,j])\n  }\n\n  prop2<-colSums(dist_1)/PerNo\n  stdev2<-apply(dist_1,2,sd)\n  prop3<-colSums(dist_2)/PerNo\n  stdev3<-apply(dist_2,2,sd)\n  prop4<-colSums(dist_3)/PerNo\n  stdev4<-apply(dist_3,2,sd)\n  ctt_txt<-cbind(name,difficulty,stdev,discrimination,\n                 prop1,stdev1,cor1,prop2,stdev2,cor2,\n                 prop3,stdev3,cor3,prop4,stdev4,cor4)\n\n  option_id<-rep(1:4,length=ItemNo*4)\n  item_id<-rep(name,each=4)\n  collection_id<-rep(TestName,length=ItemNo*4)\n  Proportion<-c(rbind(prop1,prop2,prop3,prop4))\n  Biserial_Corr<-c(rbind(cor1,cor2,cor3,cor4))\n  Biserial_Corr[which(Biserial_Corr==\"NaN\")]<-0\n  ctt_csv<-cbind(option_id,item_id,collection_id,Proportion,Biserial_Corr)\n  CsvPath<-paste0(MainPath,\"/UploadFiles/\",Skill,\"/csv/\")\n  if (file.exists(CsvPath)==F)\n  {\n    dir.create(CsvPath)\n  }\n  write.csv(ctt_csv, paste0(CsvPath,\"Options.csv\"), row.names=F)\n\n  #### IRT Analysis ####\n  m<-RM(score_withna)\n  p<-person.parameter(m)\n  fit<-itemfit(p)\n  bparam<-se<-wms<-stdwms<-ums<-stdums<-NULL\n  for (j in 1:ItemNo)\n  {\n    if (prod(1*(na.omit(score_withna[,j])==1))==1)\n    {\n      bparam[j]<--4.40\n      se[j]<-1.843\n      wms[j]<-stdwms[j]<-ums[j]<-stdums[j]<-NA\n    } else {\n      if (prod(1*(na.omit(score_withna[,j])==0))==1)\n      {\n        bparam[j]<-4.20\n        se[j]<-1.8345295\n        wms[j]<-stdwms[j]<-ums[j]<-stdums[j]<-NA\n      } else {\n        ind_j<-which(colnames(m$X)==colnames(score_withna)[j])\n        bparam[j]<-m$betapar[ind_j]*(-1)\n        se[j]<-m$se.beta[ind_j]\n        wms[j]<-fit$i.infitMSQ[ind_j]\n        stdwms[j]<-fit$i.infitZ[ind_j]\n        ums[j]<-fit$i.outfitMSQ[ind_j]\n        stdums[j]<-fit$i.infitZ[ind_j]\n      }\n    }\n  }\n\n  model<-rep(\"L3\",ItemNo)\n  ncat<-rep(2,ItemNo)\n  group<-name\n  extreme<-rep(\"No\",ItemNo)\n\n  extreme[which(bparam==-4.20)]<-\"Minimum\"\n  extreme[which(bparam==4.2)]<-\"Maximum\"\n\n  # save to Reading or Listening file\n  irt_full<-cbind(name,model,ncat,group,extreme,bparam,se,wms,stdwms,ums,stdums)\n  IrtPath<-paste0(MainPath, \"/\", Skill, \"/IRT/\") # in Reading or Listening file\n  if (file.exists(IrtPath)==F)\n  {\n    if (file.exists(paste0(MainPath,\"/\",Skill,\"/\"))==F)\n    {\n      dir.create(paste0(MainPath,\"/\",Skill,\"/\"))\n      dir.create(IrtPath)\n    } else {\n      dir.create(IrtPath)\n    }\n  }\n  write.csv(irt_full,paste0(IrtPath,Skill,\"_IRT_Param.csv\"),row.names = F)\n\n  # save to Uploads/csv file\n  Sample_size<-rep(PerNo,ItemNo)\n  Response_Rate<-1-colSums(is.na(score_withna))/PerNo\n  IRT_Infit<-wms\n  IRT_Outfit<-ums\n  IRT_Model<-rep(\"1PL\",ItemNo)\n  IRT_param<-bparam\n  IRT_Standard_Error<-se\n  irt_csv<-cbind(name,rep(TestName,ItemNo),Sample_size,Response_Rate,IRT_Infit,IRT_Outfit,IRT_Model,IRT_param,IRT_Standard_Error)\n  colnames(irt_csv)<-c(\"item_id\",\"collection_id\",\"Sample_Size\",\"Response_Rate\",\"IRT_Infit\",\"IRT_Outfit\",\"IRT_Model\",\n                       \"IRT_param\",\"IRT_Standard_Error\")\n  write.csv(irt_csv,paste0(CsvPath,\"items.csv\"), row.names=F)\n\n  if (DIF)\n  {\n    #### DIF Detection Figures ####\n    #### gender ####\n    ind_m<-which(Data$gender==\"M\") # index for male\n    sum_score_m<-sum_score[ind_m]\n    sum_score_f<-sum_score[-ind_m]\n    score_matrix_m<-score_matrix[ind_m,]\n    score_matrix_f<-score_matrix[-ind_m,]\n\n    DifPath_g1<-paste0(MainPath, \"/UploadFiles/\", Skill, \"/dif/gender/\") # in upload file\n    if (file.exists(DifPath_g1)==F)\n    {\n      if (file.exists(paste0(MainPath, \"/UploadFiles/\", Skill, \"/dif/\"))==F)\n      {\n        dir.create(paste0(MainPath, \"/UploadFiles/\", Skill, \"/dif/\"))\n        dir.create(DifPath_g1)\n      } else dir.create(DifPath_g1)\n    }\n\n    den_m<-density(sum_score_m,kernel = \"gaussian\", bw=\"bcv\")\n    den_f<-density(sum_score_f,kernel = \"gaussian\", bw=\"bcv\")\n    for (j in 1:ItemNo)\n    {\n      jpeg(paste0(DifPath_g1,colnames(response)[j],\".jpg\"), width = 450, height = 400)\n      fit<-locpoly(sum_score_f, score_matrix_f[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      plot(fit$x,fit$y,type=\"l\", ylim=c(0,1), #main=paste0(\"Gender DIF for \",colnames(response)[j]),\n           xlim=range(sum_score), xlab=\"Total Correct\",ylab=\"Probability\",lwd=2)\n\n      fit<-locpoly(sum_score_m, score_matrix_m[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,type=\"l\", ylim=c(0,1),xlim=range(sum_score),lty=2,col=\"red\",lwd=2)\n\n      #legend(\"topleft\", legend=c(\"Focal Group (F)\", \"Reference Group (M)\"),\n      #       lty=c(1,2), col=c(\"black\", \"red\"),bty=\"n\")\n      polygon(x=c(den_m$x,rev(den_m$x)),y=c(den_m$y*length(ind_m)*20/PerNo,rep(0,length(den_m$x))),\n              col=red,border=NA, xlim=range(sum_score))\n      polygon(x=c(den_f$x,rev(den_f$x)),y=c(den_f$y*(PerNo-length(ind_m))*20/PerNo,rep(0,length(den_f$x))),\n              col=grey,border=NA, xlim=range(sum_score))\n\n      dev.off()\n    }\n\n    DifPath_g2<-paste0(MainPath, \"/\", Skill, \"/DIF/gender/\") # in Reading or Listening file\n    if (file.exists(DifPath_g2)==F)\n    {\n      if (file.exists(paste0(MainPath, \"/\", Skill, \"/DIF/\"))==F)\n      {\n        if (file.exists(paste0(MainPath, \"/\",Skill))==F)\n        {\n          dir.create(paste0(MainPath, \"/\", Skill, \"/DIF/\"))\n          dir.create(DifPath_g2)\n        } else {\n          dir.create(paste0(MainPath, \"/\", Skill, \"/DIF/\"))\n          dir.create(DifPath_g2)\n        }\n      } else dir.create(DifPath_g2)\n    }\n\n    for (j in 1:ItemNo)\n    {\n      jpeg(paste0(DifPath_g2,colnames(response)[j],\".jpg\"), width = 450, height = 400)\n      fit<-locpoly(sum_score_f, score_matrix_f[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      plot(fit$x,fit$y,type=\"l\", ylim=c(0,1), #main=paste0(\"Gender DIF for \",colnames(response)[j]),\n           xlim=range(sum_score), xlab=\"Total Correct\",ylab=\"Probability\",lwd=2)\n\n      fit<-locpoly(sum_score_m, score_matrix_m[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,type=\"l\", ylim=c(0,1),xlim=range(sum_score),lty=2,col=\"red\",lwd=2)\n\n      #legend(\"topleft\", legend=c(\"Focal Group (F)\", \"Reference Group (M)\"),\n      #       lty=c(1,2), col=c(\"black\", \"red\"),bty=\"n\")\n\n      polygon(x=c(den_m$x,rev(den_m$x)),y=c(den_m$y*length(ind_m)*20/PerNo,rep(0,length(den_m$x))),\n              col=red,border=NA, xlim=range(sum_score))\n      polygon(x=c(den_f$x,rev(den_f$x)),y=c(den_f$y*(PerNo-length(ind_m))*20/PerNo,rep(0,length(den_f$x))),\n              col=grey,border=NA, xlim=range(sum_score))\n      dev.off()\n    }\n\n\n    #### heritage_t ####\n    ind_y<-which(Data$heritage_t==\"Y\") # index for heritage students\n    sum_score_y<-sum_score[ind_y]\n    sum_score_n<-sum_score[-ind_y]\n    score_matrix_y<-score_matrix[ind_y,]\n    score_matrix_n<-score_matrix[-ind_y,]\n\n    DifPath_h1<-paste0(MainPath, \"/UploadFiles/\", Skill, \"/dif/heritage/\")\n    if (file.exists(DifPath_h1)==F)\n    {\n      dir.create(DifPath_h1)\n    }\n\n    den_y<-density(sum_score_y,kernel = \"gaussian\", bw=\"bcv\")\n    den_n<-density(sum_score_n,kernel = \"gaussian\", bw=\"bcv\")\n    for (j in 1:ItemNo)\n    {\n      jpeg(paste0(DifPath_h1,colnames(response)[j],\".jpg\"), width = 450, height = 400)\n      fit<-locpoly(sum_score_y, score_matrix_y[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      plot(fit$x,fit$y,type=\"l\", ylim=c(0,1), #main=paste0(\"Heritage DIF for \", colnames(response)[j]),\n           xlim=range(sum_score), xlab=\"Total Correct\",ylab=\"Probability\",lwd=2)\n\n      fit<-locpoly(sum_score_n, score_matrix_n[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,type=\"l\", ylim=c(0,1),xlim=range(sum_score),lty=2,col=\"red\",lwd=2)\n\n      #legend(\"topleft\", legend=c(\"Focal Group (Y)\", \"Reference Group (N)\"),\n      #       lty=c(1,2), col=c(\"black\", \"red\"),bty=\"n\")\n\n      polygon(x=c(den_y$x,rev(den_y$x)),y=c(den_y$y*length(ind_y)*20/PerNo,rep(0,length(den_y$x))),\n              col=red,border=NA, xlim=range(sum_score))\n      polygon(x=c(den_n$x,rev(den_n$x)),y=c(den_n$y*(PerNo-length(ind_y))*20/PerNo,rep(0,length(den_n$x))),\n              col=grey,border=NA, xlim=range(sum_score))\n      dev.off()\n    }\n\n    DifPath_h2<-paste0(MainPath, \"/\", Skill, \"/DIF/heritage_t/\") # in Reading or Listening file\n    if (file.exists(DifPath_h2)==F)\n    {\n      if (file.exists(paste0(MainPath, \"/\", Skill, \"/DIF/\"))==F)\n      {\n        if (file.exists(paste0(MainPath, \"/\", Skill))==F)\n        {\n          dir.create(paste0(MainPath,\"/\", Skill,\"/\"))\n          dir.create(paste0(MainPath, \"/\", Skill, \"/DIF/\"))\n          dir.create(DifPath_h2)\n        } else {\n          dir.create(paste0(MainPath, \"/\", Skill, \"/DIF/\"))\n          dir.create(DifPath_h2)\n        }\n      } else dir.create(DifPath_h2)\n    }\n\n    for (j in 1:ItemNo)\n    {\n      jpeg(paste0(DifPath_h2,colnames(response)[j],\".jpg\"), width = 450, height = 400)\n      fit<-locpoly(sum_score_y, score_matrix_y[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      plot(fit$x,fit$y,type=\"l\", ylim=c(0,1), #main=paste0(\"Heritage DIF for \",colnames(response)[j]),\n           xlim=range(sum_score), xlab=\"Total Correct\",ylab=\"Probability\",lwd=2)\n\n      fit<-locpoly(sum_score_n, score_matrix_n[,j], drv = 0L, degree=1, kernel = \"normal\",\n                   bandwidth=bw, gridsize = 51L, bwdisc = 51,\n                   range.x<-range(sum_score)+c(-5,5), binned = FALSE, truncate = TRUE)\n      lines(fit$x,fit$y,type=\"l\", ylim=c(0,1),xlim=range(sum_score),lty=2,col=\"red\",lwd=2)\n\n      #legend(\"topleft\", legend=c(\"Focal Group (Y)\", \"Reference Group (N)\"),\n      #       lty=c(1,2), col=c(\"black\", \"red\"),bty=\"n\")\n\n      polygon(x=c(den_y$x,rev(den_y$x)),y=c(den_y$y*length(ind_y)*20/PerNo,rep(0,length(den_y$x))),\n              col=red,border=NA, xlim=range(sum_score))\n      polygon(x=c(den_n$x,rev(den_n$x)),y=c(den_n$y*(PerNo-length(ind_y))*20/PerNo,rep(0,length(den_n$x))),\n              col=grey,border=NA, xlim=range(sum_score))\n      dev.off()\n    }\n\n\n\n    #### DIF Detection table ####\n\n\n    # DIF for gender\n    mh_g<-difMH(Data=score_withna,group=Data$gender,focal.name = \"F\",correct=F)\n\n    chisq_g<-mh_g$MH\n    pvalue_g<-1-pchisq(chisq_g,df=1)\n    #n<-\n    effectsize_g<--2.35*log(mh_g$alphaMH)\n    upper_g<-effectsize_g+1.96*2.35*sqrt(mh_g$varLambda)\n    lower_g<-effectsize_g-1.96*2.35*sqrt(mh_g$varLambda)\n    etsclass_g<-rep(\"B\",ItemNo)\n    for (j in 1:ItemNo)\n    {\n      if (pvalue_g[j]==\"NaN\")\n      {\n        etsclass_g[j]<-\"NaN\"\n      } else {\n        if (pvalue_g[j]>0.05 | abs(effectsize_g[j])<1)\n        {\n          etsclass_g[j]<-\"A\"\n        } else {\n          if (pvalue_g[j]<0.05 & abs(effectsize_g[j])>1.5)\n          {\n            etsclass_g[j]<-\"C\"\n          }\n        }\n      }\n    }\n    ind_plus<-which((etsclass_g==\"B\" | etsclass_g==\"C\") & effectsize_g>0)\n    etsclass_g[ind_plus]<-paste0(etsclass_g[ind_plus],\"+\")\n    dif_full_g<-cbind(name,chisq_g,pvalue_g,effectsize_g,upper_g,lower_g,etsclass_g)\n    write.csv(dif_full_g, paste0(DifPath_g2,Skill,\"_DIF_gender.csv\"),row.names<-F)\n\n    # DIF for heritage\n    mh_h<-difMH(Data=score_withna,group=Data$heritage_t,focal.name = \"Y\",correct=F)\n    chisq_h<-mh_h$MH\n    pvalue_h<-1-pchisq(chisq_h,df=1)\n    #n<-\n    effectsize_h<--2.35*log(mh_h$alphaMH)\n    upper_h<-effectsize_h+1.96*2.35*sqrt(mh_h$varLambda)\n    lower_h<-effectsize_h-1.96*2.35*sqrt(mh_h$varLambda)\n    etsclass_h<-rep(\"B\",ItemNo)\n    for (j in 1:ItemNo)\n    {\n      if (pvalue_h[j]==\"NaN\")\n      {\n        etsclass_h[j]<-\"NaN\"\n      } else {\n        if (pvalue_h[j]>0.05 | abs(effectsize_h[j])<1)\n        {\n          etsclass_h[j]<-\"A\"\n        } else {\n          if (pvalue_h[j]<0.05 & abs(effectsize_h[j])>1.5)\n          {\n            etsclass_h[j]<-\"C\"\n          }\n        }\n      }\n    }\n    ind_plus<-which((etsclass_h==\"B\" | etsclass_h==\"C\") & effectsize_h>0)\n    etsclass_h[ind_plus]<-paste0(etsclass_h[ind_plus],\"+\")\n    dif_full_h<-cbind(name,chisq_h,pvalue_h,effectsize_h,upper_h,lower_h,etsclass_h)\n    write.csv(dif_full_h, paste0(DifPath_h2,Skill,\"_DIF_heritage.csv\"),row.names=F)\n\n    # create DIF csv file #\n    item_id<-rep(name, each=2)\n    collection_id<-rep(TestName, 2*ItemNo)\n    Type<-rep(c(\"gender\",\"heritage\"),length=2*ItemNo)\n    Value<-Group_1_Value<-Group_2_Value<-rep(NULL, 2*ItemNo)\n    for (j in 1:ItemNo)\n    {\n      Value[2*j-1]<-etsclass_g[j]\n      Value[2*j]<-etsclass_h[j]\n\n      Group_1_Value[2*j-1]<-sum(1*(Data$gender[is.na(score_withna[,j])==F]==\"F\"))\n      Group_1_Value[2*j]<-sum(1*(Data$heritage_t[is.na(score_withna[,j])==F]==\"Y\"))\n      Group_2_Value[2*j-1]<-sum(1*(Data$gender[is.na(score_withna[,j])==F]==\"M\"))\n      Group_2_Value[2*j]<-sum(1*(Data$heritage_t[is.na(score_withna[,j])==F]==\"N\"))\n    }\n    Group_1_Label<-rep(c(\"female\",\"heritage\"))\n    Group_2_Label<-rep(c(\"male\",\"non-heritage\"))\n    dif_csv<-cbind(item_id, collection_id, Type, Value, Group_1_Label, Group_1_Value, Group_2_Label, Group_2_Value)\n    CsvPath<-paste0(MainPath,\"/UploadFiles/\",Skill,\"/csv/\")\n    if (file.exists(CsvPath)==F)\n    {\n      dir.create(CsvPath)\n    }\n    write.csv(dif_csv, paste0(CsvPath, \"diffs.csv\"),row.names = F)\n\n  }\n\n\n\n  #result[[which(c(\"Reading\",\"Listening\")==Skill)]]<-\n  #  list(describe<-sum_describe, DIF_gender<-dif_full_g, DIF_heritage<-dif_full_h, CTT<-ctt_txt, IRT<-irt_full)\n  }\n  #result\n}\n\n",
    "created" : 1501261438170.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1763968028",
    "id" : "272E19C9",
    "lastKnownWriteTime" : 1501261447,
    "last_content_update" : 1501261447500,
    "path" : "~/Google Drive/AC/ACReporting/R/idr_function.R",
    "project_path" : "R/idr_function.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}